//Find Node/Value Algorithm:

class SearchListener{
	boolean done = false;
	Set<Node> prevQueried;
	Set<Node> querySet;
	SortedSet<Node> foundNodesSet;

	void searchInit(Identifier targetID){
		querySet = new HashSet<Node>(getNearestNodes(targetID, alpha));
		prevQueried = newHashSet<Node>();
	}
	
	
	void searchQuerySet(){
	  	prevQueried.addAll(querySet);
	  	QueriesObject qo = new QueriesObject(querySet) 
	  	for (Node node : querySet) {
		    //in parallel, event based
		    executeFindNode(node, targetID, new MessageListener(qo) {
		    	void messageReceived(FindNodeResult result) {
		          	qo.removeNode (result.sender())
		          	if(result.found()){
		          	    //event identifier found
		          	}
		          	else{
		          		//trigger updatePrevQueried
		          	}
		          	if(qo.size() == 0){
		          		//trigger build and search
		          	}
		      	}
		      	void timeOut(){
					//trigger final search step
		      	}
		    })
		}		
	    Timer halfTimer = new Timer(halfTimer, new ActionListener(){
	    	void ActionPerformed(){
	    		if(qo.size < alpha){
	    			//trigger updatePrevQueried buildNewQuerySet searchQuerySet
	    		}
	    	}
	    }) 
	}
	
	void updatePrevQueried(){	
	    foundNodesSet.addAll(fnr.nodes());
		networkInstance.getBuckets().addAll(foundNodesSet);
	}
	
	void buildNewQuerySet(){
		Set<Node> newQuerySet = new HashSet((new ArrayList(foundNodesSet)).subList(0, foundNodesSet.size() > alpha ? alpha : foundNodesSet.size()));
		newQuerySet.removeAll(prevQueried);
		querySet = newQuerySet;
		if (querySet.size() == 0) {
			//call finalSearchStep
		}
	}

	void finalSearchStep(){
		querySet = new HashSet<Node>(getNearestNodes(targetID, k, excluding: prevQueried));
	}
	
}
	

