//Find Node/Value Algorithm:

class SearchListener{
	boolean done = false;
	Set<Node> prevQueried;
	Set<Node> querySet;

	void searchInit(Identifier targetID){
		querySet = new HashSet<Node>(getNearestNodes(targetID, alpha));
		prevQueried = newHashSet<Node>();
	}
	
	while (true) {
		SortedSet<Node> foundNodesSet = new TreeSet<Node>(new IdentifiableDistanceComparator(targetID));
	  	prevQueried.addAll(querySet);
	  	QueriesObject qo = new QueriesObject(querySet) 
	  	for (Node node : querySet) {
		    //in parallel, event based
		    executeFindNode(node, targetID, new MessageListener(qo) {
		    	void messageReceived(FindNodeResult result) {
		          	qo.removeNode (result.sender())
		          	if(result.found()){
		          	    //event identifier found
		          	}
		          	else{
		          		//event identifier not found
		          	}
		      	}
		    })
	    	foundNodesSet.addAll(fnr.nodes());    
		}
	
		networkInstance.getBuckets().addAll(foundNodesSet);
		if(done) {
			return null;
		}
		Set<Node> newQuerySet = new HashSet((new ArrayList(foundNodesSet)).subList(0, foundNodesSet.size() > alpha ? alpha : foundNodesSet.size()));
		newQuerySet.removeAll(prevQueried);
		querySet = newQuerySet;  
		if (querySet.size() == 0) {
			done = true;
			querySet = new HashSet<Node>(getNearestNodes(targetID, k, excluding: prevQueried));
		}
	}
	

